/* CODED BY AHMAD K. KHANFAR, 

THE CODE WILL GENERATE DET 128 bit, Wrappers, and DRIP Links*/
#include <Ed25519.h>
#include <RNG.h>
#include <vector>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <bitset>
#include <iostream>
#include <KeccakP-1600-SnP.h>
#include "KeccakP-1600-inplace32BI.c"
#include <WiFi.h>
#include <time.h>  // For Unix timestamps
#include <HTTPClient.h>
#include <ArduinoOTA.h>
using namespace std;
uint8_t test_message[] = "Test message for signing";
uint8_t test_signature[64];
int hda = 38;

// Wi-Fi Credentials
const char* ssid = "Khanfar";
const char* password = "khalid123";
String serverName = "https://vertexpal.com/Drone/";  // Update with your local IP and endpoint

// NTP Server Settings
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 0;  // Adjust if you need a specific time zone offset
const int daylightOffset_sec = 0;

// Current firmware version
const String currentVersion = "1.2.0";
// Server details
const char* versionUrl = "https://vertexpal.com/Drone/version.txt";
const char* firmwareUrl = "https://vertexpal.com/Drone/firmware/firmware.bin";

// Define Manufacturer ID (arbitrary for now; replace with FAA-assigned ID if available)
#define MANUFACTURER_ID 0xFFFF


 int loops = -1; 

// Defining Parent DET as custom for now 
// DET (16 bytes) stored as a uint8_t array
std:: string childDET; 
std:: string ParentDET;
uint8_t signature[64];
uint8_t parentSignature[64];
std::vector<uint8_t> wrapper;
std::vector<uint8_t> dripLink;
unsigned long lastTransmissionTime = 0;  // To manage timed transmissions
const unsigned long transmissionInterval = 5000;  // 5 seconds
// Function to convert an unsigned int to a binary string with leading zeros
std::string toBinary(unsigned int value, int bits) {
    return std::bitset<64>(value).to_string().substr(64 - bits, bits);  // Convert and trim to required bits
}

// Helper function to insert 32-bit Unix timestamp into a vector (little-endian format)
void insertUnixTimestamp(std::vector<uint8_t>& vec, uint32_t timestamp) {
    for (int i = 0; i < 4; i++) {
        vec.push_back((uint8_t)(timestamp >> (8 * i)));  // Little-endian order
    }
}

std::string binaryToHex(const std::string& binaryStr) {
    std::string hexStr;
    int len = binaryStr.length();

    // Iterate over every 4 bits and convert them to hex
    for (int i = 0; i < len; i += 4) {
        std::string fourBits = binaryStr.substr(i, 4); // Extract 4 bits
        unsigned int decimalValue = std::stoi(fourBits, nullptr, 2); // Convert binary to decimal

        // Convert decimal to hexadecimal manually
        if (decimalValue < 10) {
            hexStr += '0' + decimalValue; // 0-9
        } else {
            hexStr += 'A' + (decimalValue - 10); // A-F
        }
    }

    return hexStr;
}

// Helper function to convert std::string (hex) to uint8_t array
void hexStringToByteArray(const std::string& hexStr, uint8_t* byteArray, size_t byteArrayLen) {
    for (size_t i = 0; i < byteArrayLen; ++i) {
        std::string byteString = hexStr.substr(2 * i, 2);
        byteArray[i] = (uint8_t)strtol(byteString.c_str(), nullptr, 16);
    }
}

// Function to initialize BLE advertising
void initializeBLE() {
    BLEDevice::init("UAV_Broadcast");
    BLEServer *pServer = BLEDevice::createServer();
    pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(BLEUUID((uint16_t)MANUFACTURER_ID));
    pAdvertising->setScanResponse(false);
    pAdvertising->setMinPreferred(0x06); // Functions that help with iPhone connections
    pAdvertising->setMinPreferred(0x12);
}

// Function to update BLE advertising data with Wrapper
void updateBLEAdvertising(const std::vector<uint8_t> &wrapper) {
    // Create manufacturer-specific data payload
    BLEAdvertisementData advertisementData;
    std::string wrapperHex;
    for (const auto &byte : wrapper) {
        char buf[3];
        sprintf(buf, "%02X", byte);
        wrapperHex += buf;
    }

    // Set manufacturer-specific data
    std::string manufacturerData = wrapperHex;
    advertisementData.setManufacturerData(manufacturerData);

    // Update advertising data
    pAdvertising->setAdvertisementData(advertisementData);
    pAdvertising->start();
    Serial.println("BLE Advertising started with updated Wrapper.");
}

// Function to generate F3411 data (example values)
std::vector<uint8_t> generateF3411Message() {
    std::vector<uint8_t> f3411Message;

    // Example F3411 fields (latitude, longitude, altitude, velocity, etc.)
    uint32_t latitude = 374221234;  // Example: 37.4221234 degrees
    uint32_t longitude = -122084000; // Example: -122.084000 degrees
    uint16_t altitude = 100;       // Example: 100 meters
    uint16_t velocity = 50;        // Example: 50 m/s
    uint32_t timestamp = getCurrentUnixTimestamp();

    // Add data to F3411 message in little-endian format
    f3411Message.insert(f3411Message.end(), (uint8_t *)&latitude, (uint8_t *)&latitude + sizeof(latitude));
    f3411Message.insert(f3411Message.end(), (uint8_t *)&longitude, (uint8_t *)&longitude + sizeof(longitude));
    f3411Message.insert(f3411Message.end(), (uint8_t *)&altitude, (uint8_t *)&altitude + sizeof(altitude));
    f3411Message.insert(f3411Message.end(), (uint8_t *)&velocity, (uint8_t *)&velocity + sizeof(velocity));
    f3411Message.insert(f3411Message.end(), (uint8_t *)&timestamp, (uint8_t *)&timestamp + sizeof(timestamp));

    return f3411Message;
}


// Update the Wrapper creation to include F3411 data
std::vector<uint8_t> createWrapperWithF3411(
    const std::vector<uint8_t> &payload, const uint8_t *det) {
    wrapper.clear();

    // Add F3411 data to the payload
    std::vector<uint8_t> f3411Message = generateF3411Message();
    payload.insert(payload.end(), f3411Message.begin(), f3411Message.end());

    // Generate Wrapper
    return createWrapper(payload, det);
}





// Helper function to print a vector of uint8_t as hex values
void printVectorHex(const std::vector<uint8_t>& vec, const char* label) {
    Serial.print(label);
    for (const auto& byte : vec) {
        Serial.printf("%02X ", byte);
    }
    Serial.println();
}


// Key variables for private and public key
uint8_t privateKey[32];
uint8_t publicKey[32];


uint8_t parentPrivateKey[32];
uint8_t parentPublicKey[32];
uint8_t contextID[] = { 0x00B5, 0xA69C, 0x795D, 0xF5D5, 0xF008, 0x7F56, 0x843F, 0x2C40 };  // Context ID for DET
//STRUCTS 
struct ORCHID_HASH {
uint8_t hi[32];  
unsigned long long hashOutput: 64; // 64-bit Hash Output (from cryptographic function)
};
struct DET{
  unsigned int prefix: 28;
  unsigned int raa = 14;
  unsigned int hda = 14;
  unsigned int suiteID: 8;
  ORCHID_HASH hash; 
};

DET det;
// Function to perform the cSHAKE128 hash (Keccak P-1600) for ORCHID
void cshake128(const uint8_t *input, size_t inputLen, const uint8_t *customization, size_t customLen, uint8_t *output, size_t outputLen) {
    KeccakP1600_state keccakState;  // Keccak state structure
    // Initialize the Keccak state
    KeccakP1600_StaticInitialize();
    KeccakP1600_Initialize(&keccakState);
    // Absorb customization string and input data
    KeccakP1600_AddBytes(&keccakState, customization, 0, customLen);
    KeccakP1600_AddBytes(&keccakState, input, 0, inputLen);
    // Apply the permutation
    KeccakP1600_Permute_24rounds(&keccakState);

    // Extract the output (only need 8 bytes for the 64-bit hash)
    KeccakP1600_ExtractBytes(&keccakState, output, 0, outputLen);
}

std:: string det_orchid( unsigned int hda,  unsigned int raa,  unsigned int ipv6, unsigned int suitid, uint8_t publicKey[32], bool isParent){
  std::string b_prefix = toBinary(ipv6, 28);
  std::string b_hid = toBinary(raa, 14) + toBinary(hda, 14);
  std::string b_suitid = toBinary(suitid, 8);
// Concatenate b_prefix, b_hid, and b_ogaid to form the ORCHID left side
  std::string h_orchid_left_bin = b_prefix + b_hid + b_suitid;
  String(toBinary(det.prefix, 28).c_str());
 // Convert the binary string to bytes (as required by cSHAKE)
    std::vector<uint8_t> h_orchid_left;
    for (size_t i = 0; i < h_orchid_left_bin.length(); i += 8) {
        std::bitset<8> byte(h_orchid_left_bin.substr(i, 8));
        h_orchid_left.push_back(byte.to_ulong());
}
 // Append the HI (public key) to the input for the hash
  h_orchid_left.insert(h_orchid_left.end(), publicKey, publicKey + 32); 
  // Perform cSHAKE128 hashing (8-byte hash)
    uint8_t h_hash[8];
    cshake128(h_orchid_left.data(), h_orchid_left.size(), contextID, sizeof(contextID), h_hash, sizeof(h_hash));

    // Convert h_hash to a hexadecimal string
    std::string h_hash_str;
    
    for (int i = 0; i < sizeof(h_hash); i++) {
        char buf[3];
        sprintf(buf, "%02x", h_hash[i]);
        h_hash_str += buf;
    }

     std::string h_orchid_left_hex = binaryToHex(h_orchid_left_bin);

    // Combine the binary ORCHID left side and the hashed right side
    std::string h_orchid = h_orchid_left_hex + h_hash_str;

    // re-convert the h_orchid_left_bin to make sure of the values. 

    // Format the ORCHID into an IPv6 address-like string
    std::string formatted_orchid;
    for (size_t i = 0; i < h_orchid.length(); i += 4) {
        formatted_orchid += h_orchid.substr(i, 4) + ":";
    }
    formatted_orchid.pop_back();  // Remove the trailing ':'

    //String test = binaryToHex(h_orchid);

    Serial.println();
    if(isParent){

    Serial.println("Parent DET ORCHID:" +String(formatted_orchid.c_str()));
     Serial.println("Parent Public Key:");
    }else{
    Serial.println("DET ORCHID:" +String(formatted_orchid.c_str()));
    Serial.println("Child Public Key:");
    }
           for (int i = 0; i < 32; i++) {
        Serial.printf("%02X ", publicKey[i]);
    }
  Serial.println();


    // Serial.println(h_orchid);
    // Serial.println(test);
    return h_orchid;

}


// Function to Create Payload (F3411 Messages)
std::vector<uint8_t> createPayload(const uint8_t *det, size_t detLen) {
    std::vector<uint8_t> payload;

    // Add Example F3411 Messages (25 bytes per message)
    uint8_t f3411Message[25] = {0};
    for (int i = 0; i < 25; i++) f3411Message[i] = random(0, 256);
    payload.insert(payload.end(), f3411Message, f3411Message + 25);

    // Add DET to Payload
    payload.insert(payload.end(), det, det + detLen);

    // Print the payload vector in hex
    printVectorHex(payload, "Payload (F3411 Messages): ");

    return payload;
}


std::vector<uint8_t> createDRIPLink(
    const uint8_t *parentDET, size_t parentDETLen,
    const uint8_t *det, size_t detLen,
    const uint8_t *childPublicKey, size_t publicKeyLen) {
   

    // For now, we will be generating Random DET for the Parent with Random Pair Keys. 

       // Get the current Unix timestamps
    uint32_t validNotBefore = getCurrentUnixTimestamp();  // Now
    uint32_t validNotAfter = validNotBefore + 300;  // Valid for 5 minutes

    // Insert timestamps into the DRIP link in little-endian format
    insertUnixTimestamp(dripLink, validNotBefore);
    insertUnixTimestamp(dripLink, validNotAfter);


    
    // Child DET (Drone's DET)
    dripLink.insert(dripLink.end(), det, det + detLen);

      // Child Public Key
    dripLink.insert(dripLink.end(), childPublicKey, childPublicKey + publicKeyLen);

    // Parent DET
    dripLink.insert(dripLink.end(), parentDET, parentDET + parentDETLen);

    printVectorHex(dripLink, "DRIP LINK BEFORE SIGNING: ");

 
    // Sign the Child DET using the Parent’s private key
    Ed25519::sign(parentSignature, privateKey, publicKey, det, detLen);

    // Parent Signature
    dripLink.insert(dripLink.end(), parentSignature, parentSignature + 64);

  


    return dripLink;
}


std::vector<uint8_t> createWrapper(
    const std::vector<uint8_t> &payload, const uint8_t *det) {
    
   

      // Get the current Unix timestamps
    uint32_t validNotBefore = getCurrentUnixTimestamp();  // Now
    
    wrapper.insert(wrapper.end(), (uint8_t*)&validNotBefore, (uint8_t*)&validNotBefore + 4);
    
    uint32_t validNotAfter = validNotBefore + 300;  // Valid for 5 minutes

    wrapper.insert(wrapper.end(), (uint8_t*)&validNotAfter, (uint8_t*)&validNotAfter + 4);

    // Add payload (F3411 messages, 25–100 bytes)
    wrapper.insert(wrapper.end(), payload.begin(), payload.end());

    // Add DET
    wrapper.insert(wrapper.end(), det, det + 16);

    printVectorHex(wrapper, "WRAPPER BEFORE SIGNING : ");

    // Sign the wrapper
   
    Ed25519::sign(signature, privateKey, publicKey, wrapper.data(), wrapper.size());

// test
    Ed25519::sign(test_signature, privateKey, publicKey, test_message, sizeof(test_message));




   
    // Add signature to the wrapper
    wrapper.insert(wrapper.end(), signature, signature + 64);
    


    if(loops == -1){
      sendToServer(true);
      
      sendToServer(false);
      loops++;
    }

    return wrapper;
}








void generateKeys(bool isParent){
  if(isParent){
   Ed25519::generatePrivateKey(parentPrivateKey);
   Ed25519::derivePublicKey(parentPublicKey, parentPrivateKey);
   return; 
  }
  Ed25519::generatePrivateKey(privateKey);
  Ed25519::derivePublicKey(publicKey, privateKey);

  


}

void sendWrapperAndPublicKey() {
  // Measure time
    unsigned long startTime = millis();
    String endpoint = "authenticate_det.php";  // Change this to your actual endpoint
    HTTPClient http;

    // Specify the POST endpoint
    http.begin(serverName + endpoint);
    Serial.println("Connecting to server: " + serverName + endpoint);

    // Set the content type to JSON
    http.addHeader("Content-Type", "application/json");

 

    // Convert Wrapper and Public Key to Hex Strings
    String wrapperStr = byteArrayToHexString(wrapper.data(), wrapper.size());
    String publicKeyStr = byteArrayToHexString(publicKey, sizeof(publicKey));

    // Prepare JSON payload
    String jsonPayload = "{\"wrapper\": \"" + wrapperStr + "\", \"pk\": \"" + publicKeyStr + "\"}";
    Serial.println("JSON Payload: " + jsonPayload);  // Debugging: Print payload

    // Send POST request
    int httpResponseCode = http.POST(jsonPayload);
    unsigned long endTime = millis(); 
    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("Server Response:");
        Serial.println(response);

        // Check response for success or failure
        if (response.indexOf("success") >= 0) {
            Serial.println("Wrapper and Public Key verified successfully.");
        } else {
            Serial.println("Verification failed: " + response);
        }
    } else {
        Serial.print("Error on sending POST: ");
        Serial.println(httpResponseCode);
    }

    http.end();  // Close the connection

     // Calculate round-trip time
    unsigned long roundTripTime = endTime - startTime;
    Serial.print("Round-trip time: ");
    Serial.print(roundTripTime);
    Serial.println(" ms");

    delay(10000);
}



void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

// Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi.");

    // Initialize time from NTP server
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);

    // Wait for time to be set
    struct tm timeInfo;
    if (!getLocalTime(&timeInfo)) {
        Serial.println("Failed to obtain time");
        return;
    }

    Serial.println("Time synchronized:");
    Serial.println(&timeInfo, "%Y-%m-%d %H:%M:%S");

    generateKeys(true);
    generateKeys(false);
    
    // Setup the constat values. :
    det.prefix = 0x2001003; 
    det.raa = 16376; 
    det.hda = 1025;
    det.suiteID = 5; 


    defineWrapper();
    
    //Sent to the Server the DET to register it. 

// Check for updates
    checkForUpdates();
  
     
    
  
}


void defineWrapper (){

       ParentDET=  det_orchid (det.hda, det.raa, det.prefix, det.suiteID, parentPublicKey, true);
       childDET =  det_orchid (det.hda, det.raa, det.prefix, det.suiteID, publicKey,false);

        
        // Convert std::string DETs to uint8_t arrays
        uint8_t parentDETArray[16];
        uint8_t childDETArray[16];
        hexStringToByteArray(ParentDET, parentDETArray, sizeof(parentDETArray));
        hexStringToByteArray(childDET, childDETArray, sizeof(childDETArray));
        
        // Create Payload and DRIP Link
        std::vector<uint8_t> payload = createPayload(parentDETArray, sizeof(parentDETArray));
        std::vector<uint8_t> dripLink = createDRIPLink(
            parentDETArray, sizeof(parentDETArray), 
            childDETArray, sizeof(childDETArray), 
            publicKey, sizeof(publicKey)
        );
         // Create Wrapper
        std::vector<uint8_t> wrapper = createWrapper(payload, childDETArray);


}

void sendToServer(bool isParent) {
    String endpoint = "uav_registration.php";
    HTTPClient http;
    
    // Specify the POST endpoint
    http.begin(serverName + endpoint);
    Serial.println("Connecting to server: " + serverName + endpoint);

    // Set the content type to JSON
    http.addHeader("Content-Type", "application/json");

    // Prepare your JSON data with DET information
    String jsonPayload = "{}";
    if(isParent){
    String parentPublicKeyStr = byteArrayToHexString(parentPublicKey, sizeof(parentPublicKey));
    String parentPrivateKeyStr = byteArrayToHexString(parentPrivateKey, sizeof(parentPrivateKey));
    String parentSignatureStr = byteArrayToHexString(parentSignature, sizeof(parentSignature));
    String dripLinkStr = byteArrayToHexString(dripLink.data(), dripLink.size());
    jsonPayload = "{\"ParentDET\": \"" + String(ParentDET.c_str()) + "\", \"pk\": \"" + parentPublicKeyStr + "\",  \"parentSignature\": \"" + parentSignatureStr + "\",  \"dripLink\": \"" + dripLinkStr + "\", \"prK\": \"" + parentPrivateKeyStr + "\"}";
    }else{

        String publicKeyStr = byteArrayToHexString(publicKey, sizeof(publicKey));
       String signatureStr = byteArrayToHexString(signature, sizeof(signature));
      String wrapperStr = byteArrayToHexString(wrapper.data(), wrapper.size());
       jsonPayload = "{\"DET\": \"" + String(childDET.c_str()) + "\", \"pk\": \"" + publicKeyStr + "\", \"signature\": \"" + signatureStr + "\", \"hda\": \"" + hda + "\", \"wrapper\": \"" + wrapperStr + "\"}";
       hda ++;

    }

    Serial.println("JSON Payload: " + jsonPayload);  // Debugging: Print payload to verify

    // Send POST request with JSON payload
    int httpResponseCode = http.POST(jsonPayload);

    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("Server Response:");
        Serial.println(response);
    } else {
        Serial.print("Error on sending POST: ");
        Serial.println(httpResponseCode);
    }

    http.end();  // Close the connection
}

String byteArrayToHexString(const uint8_t *byteArray, size_t length) {
    String hexString = "";
    for (size_t i = 0; i < length; i++) {
        if (byteArray[i] < 0x10) {
            hexString += "0"; // add leading zero for single digit hex values
        }
        hexString += String(byteArray[i], HEX);
    }
    return hexString;
}



uint32_t getCurrentUnixTimestamp() {
    time_t now;
    time(&now);  // Get the current time in seconds since the epoch
    return static_cast<uint32_t>(now);
}

void checkForUpdates() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(versionUrl);

        int httpCode = http.GET();
        if (httpCode == 200) {  // HTTP OK
            String latestVersion = http.getString();
            latestVersion.trim();  // Remove extra whitespace or newlines
            Serial.println("Latest version: " + latestVersion);
            Serial.println("Current version: " + currentVersion);

            if (latestVersion.equals(currentVersion)) {
                Serial.println("No updates available.");
            } else {
                Serial.println("Update available! Downloading...");
                performOTAUpdate(firmwareUrl);
            }
        } else {
            Serial.println("Failed to fetch update information. HTTP code: " + String(httpCode));
        }
        http.end();
    } else {
        Serial.println("Not connected to WiFi.");
    }
}

void performOTAUpdate(const char* firmwareUrl) {
    WiFiClient client;
    HTTPClient http;

    Serial.println("Connecting to firmware URL...");
    http.begin(firmwareUrl);

    int httpCode = http.GET();
    if (httpCode == 200) {  // HTTP OK
        int contentLength = http.getSize();
        WiFiClient* stream = http.getStreamPtr();

        if (Update.begin(contentLength)) {
            size_t written = Update.writeStream(*stream);
            if (written == contentLength) {
                Serial.println("Firmware update completed.");
                if (Update.end()) {
                    Serial.println("Restarting...");
                    ESP.restart();
                } else {
                    Serial.println("Update failed: " + String(Update.getError()));
                }
            } else {
                Serial.println("Written bytes do not match content length.");
                Update.abort();
            }
        } else {
            Serial.println("Not enough space for OTA update.");
        }
    } else {
        Serial.println("Firmware download failed. HTTP code: " + String(httpCode));
    }
    http.end();
}

void loop() {

 
  unsigned long currentTime = millis();
    if (currentTime - lastTransmissionTime >= transmissionInterval) {
        lastTransmissionTime = currentTime;
          ArduinoOTA.handle();
  // Convert std::string to Arduino String and print it
        Serial.println(String(toBinary(det.prefix, 28).c_str()));  // 28 bits for IPv6 Prefix
        Serial.println(String(toBinary(det.raa, 14).c_str()));  // 14 bits for RAA
        Serial.println(String(toBinary(det.hda, 14).c_str()));  // 14 bits for HDA
        Serial.println(String(toBinary(det.suiteID, 8).c_str()));  // 8 bits SUITID

        for (int i = 0; i< sizeof(privateKey); i++ ){
            Serial.print(privateKey[i]);
        }
          Serial.println();
           for (int i = 0; i< sizeof(publicKey); i++ ){
            Serial.print(publicKey[i]);
        }
                   

           // Print the payload vector in hex
      printVectorHex(dripLink, "DRIP LINK : ");       
         Serial.println();   
      printVectorHex(wrapper, "WRAPPER BEFORE SIGNING : ");  
         Serial.println(); 
      printVectorHex(wrapper, "WRAPPER AFTER SIGNING : ");

           // Broadcast Wrapper over BLE
        Serial.println("Broadcasting Wrapper over BLE...");
        updateBLEAdvertising(wrapper);


      Serial.println("Wrapper Content (Signed, Byte-by-Byte):");
for (size_t i = 0; i < wrapper.size(); i++) {
    Serial.printf("%02X ", wrapper[i]);
}
Serial.println();

Serial.println("Signed Wrapper Content (ESP32):");
for (size_t i = 0; i < wrapper.size(); i++) {
    Serial.printf("%02X ", wrapper[i]);
}
Serial.println();

Serial.println("Generated UAV Signature:");
for (int i = 0; i < 64; i++) {
    Serial.printf("%02X ", signature[i]);
}
Serial.println();


Serial.printf("Wrapper Length: %d\n", wrapper.size());

Serial.println("Generated UAV Signature Length: 64");  // Ed25519 signatures are always 64 bytes
    // Now verify the test signature
bool valid = Ed25519::verify(test_signature, publicKey, test_message, sizeof(test_message));
if (valid) {
    Serial.println("Key pair is valid on ESP32.");
} else {
    Serial.println("Key pair verification failed on ESP32.");
}

sendWrapperAndPublicKey();




    }




}
